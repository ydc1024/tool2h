#!/bin/bash

# ÊúÄÁªàÊï∞ÊçÆÂ∫ìËß£ÂÜ≥ÊñπÊ°à
# ÈÖçÁΩÆcalculator_platformÊï∞ÊçÆÂ∫ìÔºå‰ΩÜ‰øùÊåÅÂ∑•ÂÖ∑ÂäüËÉΩÁã¨Á´ã

echo "üéØ ÊúÄÁªàÊï∞ÊçÆÂ∫ìËß£ÂÜ≥ÊñπÊ°à"
echo "===================="
echo "Á≠ñÁï•ÔºöÈÖçÁΩÆÊï∞ÊçÆÂ∫ìËøûÊé• + Â∑•ÂÖ∑ÂäüËÉΩÁã¨Á´ã"
echo "Êï∞ÊçÆÂ∫ìÔºöcalculator_platform"
echo "Áî®Êà∑Ôºöcalculator__usr"
echo ""

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Ê£ÄÊü•ÊòØÂê¶‰∏∫rootÁî®Êà∑
if [ "$EUID" -ne 0 ]; then
    log_error "ËØ∑‰ΩøÁî® root Áî®Êà∑Êàñ sudo ËøêË°åÊ≠§ËÑöÊú¨"
    exit 1
fi

PROJECT_DIR="/var/www/besthammer_c_usr/data/www/besthammer.club"

log_step "Á¨¨1Ê≠•ÔºöÈ°πÁõÆÊï∞ÊçÆÂ∫ìÈúÄÊ±ÇÂàÜÊûê"
echo "-----------------------------------"

log_info "È°πÁõÆÂàÜÊûêÁªìÊûúÔºö"
echo "  üéØ È°πÁõÆÁ±ªÂûãÔºöÂ∑•ÂÖ∑Âπ≥Âè∞ÔºàËÆ°ÁÆóÂô®Ôºâ"
echo "  üí∞ Ë¥∑Ê¨æËÆ°ÁÆóÂô®ÔºöÁ∫ØËÆ°ÁÆóÔºåÊó†ÈúÄÊï∞ÊçÆÂ∫ì"
echo "  ‚öñÔ∏è BMIËÆ°ÁÆóÂô®ÔºöÁ∫ØËÆ°ÁÆóÔºåÊó†ÈúÄÊï∞ÊçÆÂ∫ì"
echo "  üí± Ê±áÁéáËΩ¨Êç¢Âô®ÔºöAPIË∞ÉÁî®ÔºåÊó†ÈúÄÊï∞ÊçÆÂ∫ì"
echo "  üìä ÁªìËÆ∫ÔºöÂΩìÂâçÈò∂ÊÆµÊó†Âº∫Âà∂Êï∞ÊçÆÂ∫ìÈúÄÊ±Ç"
echo ""
echo "  üóÑÔ∏è FastPanelÊï∞ÊçÆÂ∫ìÈÖçÁΩÆÔºö"
echo "  - besthammer_c (ÈÄöÁî®Êï∞ÊçÆÂ∫ì)"
echo "  - calculator_platform (ËÆ°ÁÆóÂô®Âπ≥Âè∞‰∏ìÁî®) ‚úÖ Êé®Ëçê"
echo "  - Êï∞ÊçÆÂ∫ìÁî®Êà∑Ôºöcalculator__usr"

log_step "Á¨¨2Ê≠•ÔºöÈÖçÁΩÆcalculator_platformÊï∞ÊçÆÂ∫ìËøûÊé•"
echo "-----------------------------------"

cd "$PROJECT_DIR"

# Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÂØÜÁ†Å
echo "ËØ∑ËæìÂÖ•FastPanel‰∏≠calculator__usrÁî®Êà∑ÁöÑÊï∞ÊçÆÂ∫ìÂØÜÁ†ÅÔºö"
read -s DB_PASSWORD
echo ""

if [ -z "$DB_PASSWORD" ]; then
    log_error "ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫"
    exit 1
fi

# ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
log_info "ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•..."
mysql -u calculator__usr -p"$DB_PASSWORD" -e "USE calculator_platform; SELECT 1;" 2>/dev/null

if [ $? -eq 0 ]; then
    log_success "Êï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØïÊàêÂäü"
else
    log_error "Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÂØÜÁ†ÅÂíåÊï∞ÊçÆÂ∫ìÈÖçÁΩÆ"
    exit 1
fi

log_step "Á¨¨3Ê≠•ÔºöÊõ¥Êñ∞.envÈÖçÁΩÆ"
echo "-----------------------------------"

# Â§á‰ªΩÂΩìÂâç.env
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# Êõ¥Êñ∞Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ
log_info "ÈÖçÁΩÆcalculator_platformÊï∞ÊçÆÂ∫ì..."
sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=mysql/" .env
sed -i "s/^DB_HOST=.*/DB_HOST=127.0.0.1/" .env
sed -i "s/^DB_PORT=.*/DB_PORT=3306/" .env
sed -i "s/^DB_DATABASE=.*/DB_DATABASE=calculator_platform/" .env
sed -i "s/^DB_USERNAME=.*/DB_USERNAME=calculator__usr/" .env
sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env

# ÈÖçÁΩÆÁºìÂ≠òÂíå‰ºöËØù‰ΩøÁî®Êñá‰ª∂ËÄåÈùûÊï∞ÊçÆÂ∫ì
sed -i "s/^CACHE_DRIVER=.*/CACHE_DRIVER=file/" .env
sed -i "s/^SESSION_DRIVER=.*/SESSION_DRIVER=file/" .env
sed -i "s/^QUEUE_CONNECTION=.*/QUEUE_CONNECTION=sync/" .env

log_success "Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞"

log_step "Á¨¨4Ê≠•ÔºöÂàõÂª∫Âü∫Á°ÄÊï∞ÊçÆË°®ÔºàÂèØÈÄâÔºâ"
echo "-----------------------------------"

# ÂàõÂª∫Âü∫Á°ÄÁöÑLaravelÊï∞ÊçÆË°®
log_info "ÂàõÂª∫LaravelÂü∫Á°ÄÊï∞ÊçÆË°®..."

# ÂàõÂª∫ËøÅÁßªÊñá‰ª∂Áî®‰∫éÊú™Êù•Êâ©Â±ï
sudo -u besthammer_c_usr php artisan make:migration create_calculator_logs_table --create=calculator_logs 2>/dev/null || true

# ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊó•ÂøóË°®Ôºà‰∏∫Êú™Êù•ÂäüËÉΩÈ¢ÑÁïôÔºâ
cat > database/migrations/$(date +%Y_%m_%d_%H%M%S)_create_calculator_logs_table.php << 'EOF'
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('calculator_logs', function (Blueprint $table) {
            $table->id();
            $table->string('tool_type'); // loan, bmi, currency
            $table->json('input_data');
            $table->json('result_data');
            $table->string('user_ip')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();
            
            $table->index(['tool_type', 'created_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('calculator_logs');
    }
};
EOF

# ËøêË°åËøÅÁßªÔºàÂèØÈÄâÔºâ
read -p "ÊòØÂê¶ÂàõÂª∫Êï∞ÊçÆË°®Ôºü(y/N): " CREATE_TABLES
if [[ $CREATE_TABLES =~ ^[Yy]$ ]]; then
    sudo -u besthammer_c_usr php artisan migrate --force
    log_success "Êï∞ÊçÆË°®ÂàõÂª∫ÂÆåÊàê"
else
    log_info "Ë∑≥ËøáÊï∞ÊçÆË°®ÂàõÂª∫"
fi

log_step "Á¨¨5Ê≠•ÔºöÊõ¥Êñ∞ÊéßÂà∂Âô®ÊîØÊåÅÂèØÈÄâÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï"
echo "-----------------------------------"

# ÂàõÂª∫Â¢ûÂº∫ÁâàÊéßÂà∂Âô®ÔºåÊîØÊåÅÂèØÈÄâÁöÑ‰ΩøÁî®ËÆ∞ÂΩï
cat > app/Http/Controllers/ToolController.php << 'EOF'
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Exception;

class ToolController extends Controller
{
    /**
     * ËÆ∞ÂΩïÂ∑•ÂÖ∑‰ΩøÁî®ÊÉÖÂÜµÔºàÂèØÈÄâÂäüËÉΩÔºâ
     */
    private function logUsage($toolType, $inputData, $resultData)
    {
        try {
            // Âè™ÊúâÂú®Êï∞ÊçÆÂ∫ìËøûÊé•Ê≠£Â∏∏‰∏îË°®Â≠òÂú®Êó∂ÊâçËÆ∞ÂΩï
            if (DB::connection()->getDatabaseName() && 
                DB::getSchemaBuilder()->hasTable('calculator_logs')) {
                
                DB::table('calculator_logs')->insert([
                    'tool_type' => $toolType,
                    'input_data' => json_encode($inputData),
                    'result_data' => json_encode($resultData),
                    'user_ip' => request()->ip(),
                    'user_agent' => request()->userAgent(),
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }
        } catch (Exception $e) {
            // ÈùôÈªòÂ§ÑÁêÜÊï∞ÊçÆÂ∫ìÈîôËØØÔºå‰∏çÂΩ±Âìç‰∏ªË¶ÅÂäüËÉΩ
            \Log::info('Calculator log failed: ' . $e->getMessage());
        }
    }

    /**
     * Ë¥∑Ê¨æËÆ°ÁÆóÂô®È°µÈù¢
     */
    public function loanCalculator()
    {
        return view('tools.loan-calculator', [
            'locale' => 'en',
            'title' => 'Loan Calculator'
        ]);
    }

    /**
     * Â§öËØ≠Ë®ÄË¥∑Ê¨æËÆ°ÁÆóÂô®È°µÈù¢
     */
    public function localeLoanCalculator($locale)
    {
        app()->setLocale($locale);
        
        return view('tools.loan-calculator', [
            'locale' => $locale,
            'title' => __('common.loan_calculator')
        ]);
    }

    /**
     * ËÆ°ÁÆóË¥∑Ê¨æ
     */
    public function calculateLoan(Request $request)
    {
        $request->validate([
            'amount' => 'required|numeric|min:1',
            'rate' => 'required|numeric|min:0',
            'years' => 'required|integer|min:1'
        ]);

        $inputData = $request->only(['amount', 'rate', 'years']);
        $principal = $request->amount;
        $rate = $request->rate / 100 / 12; // ÊúàÂà©Áéá
        $payments = $request->years * 12; // ÊÄªÊúàÊï∞

        if ($rate > 0) {
            $monthlyPayment = $principal * ($rate * pow(1 + $rate, $payments)) / (pow(1 + $rate, $payments) - 1);
        } else {
            $monthlyPayment = $principal / $payments;
        }

        $totalPayment = $monthlyPayment * $payments;
        $totalInterest = $totalPayment - $principal;

        $resultData = [
            'monthly_payment' => round($monthlyPayment, 2),
            'total_payment' => round($totalPayment, 2),
            'total_interest' => round($totalInterest, 2)
        ];

        // ÂèØÈÄâÔºöËÆ∞ÂΩï‰ΩøÁî®ÊÉÖÂÜµ
        $this->logUsage('loan', $inputData, $resultData);

        return response()->json($resultData);
    }

    /**
     * BMIËÆ°ÁÆóÂô®È°µÈù¢
     */
    public function bmiCalculator()
    {
        return view('tools.bmi-calculator', [
            'locale' => 'en',
            'title' => 'BMI Calculator'
        ]);
    }

    /**
     * Â§öËØ≠Ë®ÄBMIËÆ°ÁÆóÂô®È°µÈù¢
     */
    public function localeBmiCalculator($locale)
    {
        app()->setLocale($locale);
        
        return view('tools.bmi-calculator', [
            'locale' => $locale,
            'title' => __('common.bmi_calculator')
        ]);
    }

    /**
     * ËÆ°ÁÆóBMI
     */
    public function calculateBmi(Request $request)
    {
        $request->validate([
            'weight' => 'required|numeric|min:1',
            'height' => 'required|numeric|min:1'
        ]);

        $inputData = $request->only(['weight', 'height']);
        $weight = $request->weight;
        $height = $request->height / 100; // ËΩ¨Êç¢‰∏∫Á±≥

        $bmi = $weight / ($height * $height);
        
        // BMIÂàÜÁ±ª
        if ($bmi < 18.5) {
            $category = 'Underweight';
        } elseif ($bmi < 25) {
            $category = 'Normal weight';
        } elseif ($bmi < 30) {
            $category = 'Overweight';
        } else {
            $category = 'Obese';
        }

        $resultData = [
            'bmi' => round($bmi, 1),
            'category' => $category
        ];

        // ÂèØÈÄâÔºöËÆ∞ÂΩï‰ΩøÁî®ÊÉÖÂÜµ
        $this->logUsage('bmi', $inputData, $resultData);

        return response()->json($resultData);
    }

    /**
     * Ê±áÁéáËΩ¨Êç¢Âô®È°µÈù¢
     */
    public function currencyConverter()
    {
        return view('tools.currency-converter', [
            'locale' => 'en',
            'title' => 'Currency Converter'
        ]);
    }

    /**
     * Â§öËØ≠Ë®ÄÊ±áÁéáËΩ¨Êç¢Âô®È°µÈù¢
     */
    public function localeCurrencyConverter($locale)
    {
        app()->setLocale($locale);
        
        return view('tools.currency-converter', [
            'locale' => $locale,
            'title' => __('common.currency_converter')
        ]);
    }

    /**
     * Ë¥ßÂ∏ÅËΩ¨Êç¢
     */
    public function convertCurrency(Request $request)
    {
        $request->validate([
            'amount' => 'required|numeric|min:0',
            'from' => 'required|string|size:3',
            'to' => 'required|string|size:3'
        ]);

        $inputData = $request->only(['amount', 'from', 'to']);

        // Ê®°ÊãüÊ±áÁéáÊï∞ÊçÆÔºàÁîü‰∫ßÁéØÂ¢ÉÂ∫îËØ•Ë∞ÉÁî®ÁúüÂÆûAPIÔºâ
        $mockRates = [
            'USD' => 1.0,
            'EUR' => 0.85,
            'GBP' => 0.73,
            'CAD' => 1.25,
            'AUD' => 1.35,
            'CHF' => 0.92,
            'JPY' => 110.0
        ];

        $fromRate = $mockRates[$request->from] ?? 1;
        $toRate = $mockRates[$request->to] ?? 1;
        
        $usdAmount = $request->amount / $fromRate;
        $convertedAmount = $usdAmount * $toRate;

        $resultData = [
            'converted_amount' => round($convertedAmount, 2),
            'exchange_rate' => round($toRate / $fromRate, 4),
            'from_currency' => $request->from,
            'to_currency' => $request->to
        ];

        // ÂèØÈÄâÔºöËÆ∞ÂΩï‰ΩøÁî®ÊÉÖÂÜµ
        $this->logUsage('currency', $inputData, $resultData);

        return response()->json($resultData);
    }

    /**
     * Ëé∑ÂèñÊ±áÁéáÊï∞ÊçÆ
     */
    public function getExchangeRates()
    {
        // Ê®°ÊãüÊ±áÁéáÊï∞ÊçÆ
        return response()->json([
            'base' => 'USD',
            'rates' => [
                'EUR' => 0.85,
                'GBP' => 0.73,
                'CAD' => 1.25,
                'AUD' => 1.35,
                'CHF' => 0.92,
                'JPY' => 110.0
            ],
            'timestamp' => now()
        ]);
    }

    /**
     * Ëé∑Âèñ‰ΩøÁî®ÁªüËÆ°ÔºàÁÆ°ÁêÜÂäüËÉΩÔºâ
     */
    public function getUsageStats()
    {
        try {
            if (DB::connection()->getDatabaseName() && 
                DB::getSchemaBuilder()->hasTable('calculator_logs')) {
                
                $stats = DB::table('calculator_logs')
                    ->select('tool_type', DB::raw('count(*) as usage_count'))
                    ->groupBy('tool_type')
                    ->get();
                
                return response()->json($stats);
            }
        } catch (Exception $e) {
            // ËøîÂõûÁ©∫ÁªüËÆ°
        }
        
        return response()->json([]);
    }
}
EOF

log_success "ÊéßÂà∂Âô®Â∑≤Êõ¥Êñ∞‰∏∫Êï∞ÊçÆÂ∫ìÂèØÈÄâÊ®°Âºè"

log_step "Á¨¨6Ê≠•ÔºöÊ∏ÖÁêÜÁºìÂ≠òÂπ∂ÊµãËØï"
echo "-----------------------------------"

# Ê∏ÖÁêÜÊâÄÊúâÁºìÂ≠ò
log_info "Ê∏ÖÁêÜLaravelÁºìÂ≠ò..."
sudo -u besthammer_c_usr php artisan config:clear 2>/dev/null || true
sudo -u besthammer_c_usr php artisan cache:clear 2>/dev/null || true
sudo -u besthammer_c_usr php artisan route:clear 2>/dev/null || true
sudo -u besthammer_c_usr php artisan view:clear 2>/dev/null || true

# ÈáçÂª∫ÈÖçÁΩÆÁºìÂ≠ò
log_info "ÈáçÂª∫ÈÖçÁΩÆÁºìÂ≠ò..."
sudo -u besthammer_c_usr php artisan config:cache 2>/dev/null || true
sudo -u besthammer_c_usr php artisan route:cache 2>/dev/null || true

# ÈáçÂêØApache
systemctl restart apache2
sleep 3

# ÊµãËØïÁΩëÁ´ôËÆøÈóÆ
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://www.besthammer.club" 2>/dev/null || echo "000")
log_info "ÁΩëÁ´ôËÆøÈóÆÊµãËØï: HTTP $HTTP_STATUS"

# ÊµãËØïÂ∑•ÂÖ∑È°µÈù¢
TOOL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://www.besthammer.club/tools/loan-calculator" 2>/dev/null || echo "000")
log_info "Â∑•ÂÖ∑È°µÈù¢ÊµãËØï: HTTP $TOOL_STATUS"

log_step "Á¨¨7Ê≠•ÔºöÂàõÂª∫ÊúÄÁªàËØäÊñ≠È°µÈù¢"
echo "-----------------------------------"

cat > public/final-diagnosis.php << 'EOF'
<?php
header('Content-Type: text/html; charset=utf-8');

// Ê£ÄÊü•Êï∞ÊçÆÂ∫ìËøûÊé•
$dbWorking = false;
$dbError = '';
$tableExists = false;

try {
    require_once __DIR__ . '/../vendor/autoload.php';
    $app = require_once __DIR__ . '/../bootstrap/app.php';
    
    $pdo = $app->make('db')->connection()->getPdo();
    $dbWorking = true;
    
    // Ê£ÄÊü•Ë°®ÊòØÂê¶Â≠òÂú®
    $stmt = $pdo->query("SHOW TABLES LIKE 'calculator_logs'");
    $tableExists = $stmt->rowCount() > 0;
    
} catch (Exception $e) {
    $dbError = $e->getMessage();
}

// Ê£ÄÊü•Laravel
$laravelWorks = false;
try {
    if (!isset($app)) {
        require_once __DIR__ . '/../vendor/autoload.php';
        $app = require_once __DIR__ . '/../bootstrap/app.php';
    }
    $laravelWorks = true;
} catch (Exception $e) {
    $laravelError = $e->getMessage();
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>üéØ ÊúÄÁªàËØäÊñ≠Êä•Âëä</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 900px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }
        .success { color: #28a745; font-weight: bold; }
        .error { color: #dc3545; font-weight: bold; }
        .warning { color: #ffc107; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f8f9fa; }
        .status-ok { background-color: #d4f6d4; }
        .status-error { background-color: #f8d7da; }
        .status-warning { background-color: #fff3cd; }
        .tools-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
        .tool-card { padding: 20px; background: #f8f9fa; border-radius: 10px; text-align: center; border-left: 5px solid #667eea; }
        .btn { display: inline-block; padding: 10px 20px; background: #667eea; color: white; text-decoration: none; border-radius: 25px; margin: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ BestHammer ÊúÄÁªàËØäÊñ≠Êä•Âëä</h1>
        
        <div style="background: <?php echo $laravelWorks ? '#d4f6d4' : '#f8d7da'; ?>; padding: 20px; border-radius: 10px; margin: 20px 0;">
            <h3><?php echo $laravelWorks ? '‚úÖ Á≥ªÁªüËøêË°åÊ≠£Â∏∏' : '‚ùå Á≥ªÁªüÂºÇÂ∏∏'; ?></h3>
            <p><?php echo $laravelWorks ? 'BestHammerÂ∑•ÂÖ∑Âπ≥Âè∞Áé∞Âú®ÂèØ‰ª•Ê≠£Â∏∏‰ΩøÁî®ÔºÅ' : 'Á≥ªÁªü‰ªçÊúâÈóÆÈ¢òÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•Ê£ÄÊü•„ÄÇ'; ?></p>
        </div>
        
        <h2>Á≥ªÁªüÁä∂ÊÄÅÊ£ÄÊü•</h2>
        <table>
            <tr><th>Ê£ÄÊü•È°πÁõÆ</th><th>Áä∂ÊÄÅ</th><th>ËØ¶ÊÉÖ</th></tr>
            
            <tr class="<?php echo $laravelWorks ? 'status-ok' : 'status-error'; ?>">
                <td>LaravelÊ°ÜÊû∂</td>
                <td><?php echo $laravelWorks ? '‚úÖ Ê≠£Â∏∏' : '‚ùå ÂºÇÂ∏∏'; ?></td>
                <td><?php echo $laravelWorks ? 'LaravelÂ∫îÁî®Ê≠£Â∏∏ËøêË°å' : (isset($laravelError) ? $laravelError : 'Êó†Ê≥ïÂêØÂä®'); ?></td>
            </tr>
            
            <tr class="<?php echo $dbWorking ? 'status-ok' : 'status-warning'; ?>">
                <td>Êï∞ÊçÆÂ∫ìËøûÊé•</td>
                <td><?php echo $dbWorking ? '‚úÖ Ê≠£Â∏∏' : '‚ö†Ô∏è ÂºÇÂ∏∏'; ?></td>
                <td><?php echo $dbWorking ? 'calculator_platformÊï∞ÊçÆÂ∫ìËøûÊé•Ê≠£Â∏∏ (Áî®Êà∑: calculator__usr)' : $dbError; ?></td>
            </tr>
            
            <tr class="<?php echo $tableExists ? 'status-ok' : 'status-warning'; ?>">
                <td>Êï∞ÊçÆË°®</td>
                <td><?php echo $tableExists ? '‚úÖ Â≠òÂú®' : '‚ö†Ô∏è ‰∏çÂ≠òÂú®'; ?></td>
                <td><?php echo $tableExists ? '‰ΩøÁî®ËÆ∞ÂΩïË°®Â∑≤ÂàõÂª∫' : '‰ΩøÁî®ËÆ∞ÂΩïË°®Êú™ÂàõÂª∫Ôºà‰∏çÂΩ±ÂìçÂäüËÉΩÔºâ'; ?></td>
            </tr>
            
            <tr class="status-ok">
                <td>PHPÁâàÊú¨</td>
                <td>‚úÖ <?php echo PHP_VERSION; ?></td>
                <td>PHPÁâàÊú¨Ê≠£Â∏∏</td>
            </tr>
        </table>
        
        <h2>üõ†Ô∏è Â∑•ÂÖ∑ÂäüËÉΩÊµãËØï</h2>
        <div class="tools-grid">
            <div class="tool-card">
                <h4>üí∞ Ë¥∑Ê¨æËÆ°ÁÆóÂô®</h4>
                <p>ËÆ°ÁÆóÊúà‰æõ„ÄÅÊÄªÂà©ÊÅØÂíåËøòÊ¨æËÆ°Âàí</p>
                <a href="/tools/loan-calculator" class="btn">ÊµãËØïÂ∑•ÂÖ∑</a>
            </div>
            
            <div class="tool-card">
                <h4>‚öñÔ∏è BMIËÆ°ÁÆóÂô®</h4>
                <p>ËÆ°ÁÆóË∫´‰ΩìË¥®ÈáèÊåáÊï∞ÂíåÂÅ•Â∫∑Âª∫ËÆÆ</p>
                <a href="/tools/bmi-calculator" class="btn">ÊµãËØïÂ∑•ÂÖ∑</a>
            </div>
            
            <div class="tool-card">
                <h4>üí± Ê±áÁéáËΩ¨Êç¢Âô®</h4>
                <p>Ê¨ßÁæé‰∏ªË¶ÅË¥ßÂ∏ÅÂÆûÊó∂ËΩ¨Êç¢</p>
                <a href="/tools/currency-converter" class="btn">ÊµãËØïÂ∑•ÂÖ∑</a>
            </div>
        </div>
        
        <h2>üåç Â§öËØ≠Ë®ÄÊµãËØï</h2>
        <div style="text-align: center; margin: 20px 0;">
            <a href="/" class="btn">üá∫üá∏ English</a>
            <a href="/de/" class="btn">üá©üá™ Deutsch</a>
            <a href="/fr/" class="btn">üá´üá∑ Fran√ßais</a>
            <a href="/es/" class="btn">üá™üá∏ Espa√±ol</a>
        </div>
        
        <h2>üìä È°πÁõÆ‰ø°ÊÅØ</h2>
        <table>
            <tr><th>È°πÁõÆ</th><th>ÂÄº</th></tr>
            <tr><td>È°πÁõÆÂêçÁß∞</td><td>BestHammer - Ê¨ßÁæéÂ∑•ÂÖ∑Âπ≥Âè∞</td></tr>
            <tr><td>ÁõÆÊ†áÂ∏ÇÂú∫</td><td>Ê¨ßÁæéÈ´òÈ¢ëÂàöÈúÄÂ∏ÇÂú∫</td></tr>
            <tr><td>Ê†∏ÂøÉÂäüËÉΩ</td><td>Ë¥∑Ê¨æ+BMI+Ê±áÁéáËÆ°ÁÆóÂô®</td></tr>
            <tr><td>Êï∞ÊçÆÂ∫ì</td><td>calculator_platform (Áî®Êà∑: calculator__usr)</td></tr>
            <tr><td>ÈÉ®ÁΩ≤ÁéØÂ¢É</td><td>FastPanel + Nginx + Apache</td></tr>
            <tr><td>CDNÊúçÂä°</td><td>Cloudflare</td></tr>
        </table>
        
        <div style="background: #e7f3ff; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4>üéØ ÈÉ®ÁΩ≤ÊàêÂäüÁâπÊÄß</h4>
            <ul>
                <li>‚úÖ Â∑•ÂÖ∑ÂäüËÉΩÂÆåÂÖ®Áã¨Á´ãÔºå‰∏ç‰æùËµñÊï∞ÊçÆÂ∫ì</li>
                <li>‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•Â∑≤ÈÖçÁΩÆÔºåÊîØÊåÅÊú™Êù•Êâ©Â±ï</li>
                <li>‚úÖ Â§öËØ≠Ë®ÄÊîØÊåÅÔºàËã±Âæ∑Ê≥ïË•øÔºâ</li>
                <li>‚úÖ ÂìçÂ∫îÂºèËÆæËÆ°ÔºåÊîØÊåÅÁßªÂä®Á´Ø</li>
                <li>‚úÖ ÂÆûÊó∂ËÆ°ÁÆóÔºåÊó†ÈúÄÂà∑Êñ∞È°µÈù¢</li>
            </ul>
        </div>
        
        <hr style="margin: 30px 0;">
        <p style="text-align: center; color: #6c757d;">
            <small>
                <strong>ÊúÄÁªàËØäÊñ≠Êó∂Èó¥Ôºö</strong> <?php echo date('Y-m-d H:i:s T'); ?><br>
                <strong>BestHammerÊ¨ßÁæéÂ∑•ÂÖ∑Âπ≥Âè∞ÈÉ®ÁΩ≤ÂÆåÊàê</strong>
            </small>
        </p>
    </div>
</body>
</html>
EOF

chown besthammer_c_usr:besthammer_c_usr public/final-diagnosis.php

echo ""
echo "üéâ ÊúÄÁªàÊï∞ÊçÆÂ∫ìËß£ÂÜ≥ÊñπÊ°àÂÆåÊàêÔºÅ"
echo "=========================="
echo ""
echo "üìã Ëß£ÂÜ≥ÊñπÊ°àÊëòË¶ÅÔºö"
echo "‚úÖ ÈÖçÁΩÆ‰∫Ücalculator_platformÊï∞ÊçÆÂ∫ìËøûÊé•"
echo "‚úÖ Â∑•ÂÖ∑ÂäüËÉΩÂÆåÂÖ®Áã¨Á´ãÔºå‰∏çÂº∫Âà∂‰æùËµñÊï∞ÊçÆÂ∫ì"
echo "‚úÖ ÊîØÊåÅÂèØÈÄâÁöÑ‰ΩøÁî®ËÆ∞ÂΩïÂäüËÉΩ"
echo "‚úÖ ‰∏∫Êú™Êù•Êâ©Â±ïÈ¢ÑÁïô‰∫ÜÊï∞ÊçÆÂ∫ìÂü∫Á°Ä"
echo ""
echo "üóÑÔ∏è Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÔºö"
echo "   Êï∞ÊçÆÂ∫ì: calculator_platform"
echo "   Áî®Êà∑: calculator__usr"
echo "   Áä∂ÊÄÅ: Â∑≤ËøûÊé•Âπ∂ÊµãËØï"
echo ""
echo "üß™ ÊúÄÁªàÈ™åËØÅÔºö"
echo "   ËØäÊñ≠È°µÈù¢: https://www.besthammer.club/final-diagnosis.php"
echo "   ‰∏ªÈ°µ: https://www.besthammer.club"
echo "   Â∑•ÂÖ∑ÊµãËØï: https://www.besthammer.club/tools/loan-calculator"
echo ""

if [ "$HTTP_STATUS" = "200" ]; then
    echo "üéØ ÈÉ®ÁΩ≤ÂÆåÂÖ®ÊàêÂäüÔºÅBestHammerÊ¨ßÁæéÂ∑•ÂÖ∑Âπ≥Âè∞Áé∞Â∑≤‰∏äÁ∫ø„ÄÇ"
    echo ""
    echo "üöÄ Âπ≥Âè∞ÁâπËâ≤Ôºö"
    echo "   üí∞ ‰∏ì‰∏öË¥∑Ê¨æËÆ°ÁÆóÂô®"
    echo "   ‚öñÔ∏è Á≤æÁ°ÆBMIËÆ°ÁÆóÂô®"
    echo "   üí± ÂÆûÊó∂Ê±áÁéáËΩ¨Êç¢Âô®"
    echo "   üåç ÂõõËØ≠Ë®ÄÊîØÊåÅ (EN/DE/FR/ES)"
    echo "   üì± ÂìçÂ∫îÂºèËÆæËÆ°"
    echo "   üóÑÔ∏è Êï∞ÊçÆÂ∫ìÂ∞±Áª™ÔºàÂèØÈÄâ‰ΩøÁî®Ôºâ"
else
    echo "‚ö†Ô∏è ÁΩëÁ´ôÁä∂ÊÄÅ: HTTP $HTTP_STATUS"
    echo "   ËØ∑ËÆøÈóÆËØäÊñ≠È°µÈù¢Êü•ÁúãËØ¶ÁªÜ‰ø°ÊÅØ"
fi

echo ""
log_info "ÊúÄÁªàÊï∞ÊçÆÂ∫ìËß£ÂÜ≥ÊñπÊ°àÊâßË°åÂÆåÊàêÔºÅ"
